create extension if not exists "postgis" with schema "extensions";


create table "public"."isp" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."isp" enable row level security;

create table "public"."reviews" (
    "id" integer generated by default as identity not null,
    "location" geography(Point,4326) not null,
    "comments" text not null,
    "rating" smallint not null,
    "isp" bigint not null
);


alter table "public"."reviews" enable row level security;

CREATE UNIQUE INDEX isp_pkey ON public.isp USING btree (id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

alter table "public"."isp" add constraint "isp_pkey" PRIMARY KEY using index "isp_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."reviews" add constraint "public_reviews_isp_fkey" FOREIGN KEY (isp) REFERENCES isp(id) not valid;

alter table "public"."reviews" validate constraint "public_reviews_isp_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.reviews_in_view(min_lat double precision, min_lng double precision, max_lat double precision, max_lng double precision)
 RETURNS TABLE(id integer, comments text, rating smallint, isp bigint, lat double precision, lng double precision)
 LANGUAGE sql
AS $function$
	select id, comments, rating, isp, st_y(location::geometry) as lat, st_x(location::geometry) as lng
	from public.reviews
	where location && ST_SetSRID(ST_MakeBox2D(ST_Point(min_lng, min_lat), ST_Point(max_lng, max_lat)), 4326)
$function$
;

grant delete on table "public"."isp" to "anon";

grant insert on table "public"."isp" to "anon";

grant references on table "public"."isp" to "anon";

grant select on table "public"."isp" to "anon";

grant trigger on table "public"."isp" to "anon";

grant truncate on table "public"."isp" to "anon";

grant update on table "public"."isp" to "anon";

grant delete on table "public"."isp" to "authenticated";

grant insert on table "public"."isp" to "authenticated";

grant references on table "public"."isp" to "authenticated";

grant select on table "public"."isp" to "authenticated";

grant trigger on table "public"."isp" to "authenticated";

grant truncate on table "public"."isp" to "authenticated";

grant update on table "public"."isp" to "authenticated";

grant delete on table "public"."isp" to "service_role";

grant insert on table "public"."isp" to "service_role";

grant references on table "public"."isp" to "service_role";

grant select on table "public"."isp" to "service_role";

grant trigger on table "public"."isp" to "service_role";

grant truncate on table "public"."isp" to "service_role";

grant update on table "public"."isp" to "service_role";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

create policy "Enable read access for all users"
on "public"."isp"
as permissive
for select
to public
using (true);


create policy "Enable insert for everyone"
on "public"."reviews"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."reviews"
as permissive
for select
to public
using (true);



